-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


DROP TABLE IF EXISTS public.candidates;

CREATE TABLE IF NOT EXISTS public.candidates
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(15) COLLATE pg_catalog."default" NOT NULL,
    surname character varying(15) COLLATE pg_catalog."default" NOT NULL,
    "nationalId" character varying(11) COLLATE pg_catalog."default" NOT NULL,
    "birthDate" date NOT NULL,
    "eMail" character varying(20) COLLATE pg_catalog."default" NOT NULL,
    password character varying(15) COLLATE pg_catalog."default" NOT NULL,
    "rePassword" character varying(15) COLLATE pg_catalog."default" NOT NULL,
    "mernisAuth" integer NOT NULL,
    "eMailAuth" integer NOT NULL,
    CONSTRAINT "PK_Candidates_Id" PRIMARY KEY (id),
    CONSTRAINT "UK_Candidates_EMail" UNIQUE ("eMail"),
    CONSTRAINT "UK_Candidates_EMailAuth" UNIQUE ("eMailAuth"),
    CONSTRAINT "UK_Candidates_MernisAuth" UNIQUE ("mernisAuth"),
    CONSTRAINT "UK_Candidates_NationalId" UNIQUE ("nationalId")
);

DROP TABLE IF EXISTS public."eMailAuths";

CREATE TABLE IF NOT EXISTS public."eMailAuths"
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "isVerified" boolean NOT NULL,
    "verifiedDate" date NOT NULL,
    CONSTRAINT "PK_EMailAuths_Id" PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.employers;

CREATE TABLE IF NOT EXISTS public.employers
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "companyName" character varying(15) COLLATE pg_catalog."default" NOT NULL,
    "webSite" character varying(20) COLLATE pg_catalog."default" NOT NULL,
    "eMail" character varying(20) COLLATE pg_catalog."default" NOT NULL,
    telephone character varying(15) COLLATE pg_catalog."default" NOT NULL,
    password character varying(15) COLLATE pg_catalog."default" NOT NULL,
    "rePassword" character varying(15) COLLATE pg_catalog."default" NOT NULL,
    "eMailAuth" integer NOT NULL,
    "hmrsAuth" integer NOT NULL,
    CONSTRAINT "PK_Employers_Id" PRIMARY KEY (id),
    CONSTRAINT "UK_Employers_ HMRSAuth" UNIQUE ("hmrsAuth"),
    CONSTRAINT "UK_Employers_CompanyName" UNIQUE ("companyName"),
    CONSTRAINT "UK_Employers_EMailAuth" UNIQUE ("eMailAuth")
);

DROP TABLE IF EXISTS public."hmrsAuths";

CREATE TABLE IF NOT EXISTS public."hmrsAuths"
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "verifiedDate" date NOT NULL,
    "verifiedEmploye" integer NOT NULL,
    "isVerified" boolean NOT NULL,
    CONSTRAINT "PK_HMRSAuths_Id" PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."hmrsEmployees";

CREATE TABLE IF NOT EXISTS public."hmrsEmployees"
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(15) COLLATE pg_catalog."default" NOT NULL,
    surname character varying(15) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "PK_HMRSEmployees_Id" PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."mernisAuths";

CREATE TABLE IF NOT EXISTS public."mernisAuths"
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "authDate" date NOT NULL,
    "isVerified" boolean NOT NULL,
    CONSTRAINT "PK_MernisAuths_Id" PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.titles;

CREATE TABLE IF NOT EXISTS public.titles
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Titles_pkey" PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.candidates
    ADD CONSTRAINT "FK_Candidates_EMailAuthId" FOREIGN KEY ("eMailAuth")
    REFERENCES public."eMailAuths" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS "UK_Candidates_EMailAuth"
    ON public.candidates("eMailAuth");


ALTER TABLE IF EXISTS public.candidates
    ADD CONSTRAINT "FK_Candidates_MernisAuthId" FOREIGN KEY ("mernisAuth")
    REFERENCES public."mernisAuths" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS "UK_Candidates_MernisAuth"
    ON public.candidates("mernisAuth");


ALTER TABLE IF EXISTS public.employers
    ADD CONSTRAINT "FK_Employers_EMailAuthId" FOREIGN KEY ("eMailAuth")
    REFERENCES public."eMailAuths" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS "UK_Employers_EMailAuth"
    ON public.employers("eMailAuth");


ALTER TABLE IF EXISTS public.employers
    ADD CONSTRAINT "FK_Employers_HMRSAuthId" FOREIGN KEY ("hmrsAuth")
    REFERENCES public."hmrsAuths" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS "UK_Employers_ HMRSAuth"
    ON public.employers("hmrsAuth");


ALTER TABLE IF EXISTS public."hmrsAuths"
    ADD CONSTRAINT "FK_HMRSAuths_HMRSEmployeeId" FOREIGN KEY ("verifiedEmploye")
    REFERENCES public."hmrsEmployees" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;